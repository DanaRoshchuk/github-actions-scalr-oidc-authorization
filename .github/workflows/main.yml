name: Test Scalr Integration

on:
  push:
    branches:
      - master

env:
  SCALR_ENVIRONMENT: tfenv1
  SCALR_WORKSPACE: github-oidc-test

jobs:
  run-opentofu:
    runs-on: ubuntu-latest
    environment: development

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate GitHub Actions OIDC ID Token
        id: generate-oidc-token
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            $ACTIONS_ID_TOKEN_REQUEST_URL)

          OIDC_ID_TOKEN=$(echo $RESPONSE | jq -r '.value')
          echo "OIDC_ID_TOKEN=$OIDC_ID_TOKEN" >> $GITHUB_ENV

      - name: Exchange OIDC ID Token for Scalr Token
        id: exchange-token
        run: |
          RESPONSE=$(curl -s -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{"id_token": "'${{ env.OIDC_ID_TOKEN }}'", "service-account-email": "'${{ secrets.SA_EMAIL }}'"}' \
            "https://${{ secrets.SCALR_HOST }}/api/iacp/v3/service-accounts/impersonate")

          HTTP_BODY=$(echo "$RESPONSE" | sed '$ d')
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

          if [ "$HTTP_CODE" -ne 201 ]; then
            echo "Error: Failed to exchange token. HTTP status: $HTTP_CODE"
            echo "Response body: $HTTP_BODY"
            exit 1
          fi
          SCALR_TOKEN=$(echo "$HTTP_BODY" | jq -r '.data.attributes.token')
          if [ -z "$SCALR_TOKEN" ] || [ "$SCALR_TOKEN" == "null" ]; then
            echo "Error: Token not found in response."
            exit 1
          fi

          echo "SCALR_TOKEN=$SCALR_TOKEN" >> $GITHUB_ENV

      - name: Install OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          cli_config_credentials_hostname: ${{ secrets.SCALR_HOST }}
          cli_config_credentials_token: ${{ env.SCALR_TOKEN }}
      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt -check
        continue-on-error: true

      - name: Generate Override Configuration
        run: |
          cat <<EOF > override.tf
          terraform {
            cloud {
              hostname = "${{ secrets.SCALR_HOST }}"
              organization = "${{ env.SCALR_ENVIRONMENT }}"

              workspaces {
                name = "${{ env.SCALR_WORKSPACE }}"
              }
            }
          }
          EOF
      - name: Initialize and Run OpenTofu
        run: |
          tofu init
          tofu apply -auto-approve
